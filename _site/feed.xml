<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rui Shu</title>
    <description>An interesting site</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>BatchNormalization</title>
        <description>
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whaaa&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I have a friend called Bobobmob.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ruby
def whaaa
  puts &quot;I have a friend called Bobobmob.&quot;
end
&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/RuiShu/vae-clustering&quot; target=&quot;_blank&quot; class=&quot;big-button gray&quot;&gt;Code on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nbviewer.jupyter.org/github/RuiShu/vae-clustering/blob/master/experiments.ipynb&quot; target=&quot;_blank&quot; class=&quot;big-button gray&quot;&gt;Jupyter Notebook&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;http://localhost:4000/2016/12/27/batchnorm/&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 00:00:00 -0800</pubDate>
        <link>/2016/12/27/batchnorm/</link>
        <guid isPermaLink="true">/2016/12/27/batchnorm/</guid>
      </item>
    
      <item>
        <title>Gaussian Mixture VAE&#58; Lessons about Variational Inference, Generative Modeling, and Deep Nets</title>
        <description>&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\newcommand{\E}{\mathbb{E}}
\newcommand{\brac}[1]{\left[#1\right]}
\newcommand{\paren}[1]{\left(#1\right)}
&lt;/script&gt;

&lt;p&gt;Not too long ago, I came across this &lt;a href=&quot;https://arxiv.org/abs/1611.02648&quot;&gt;paper&lt;/a&gt; on unsupervised clustering with Gaussian Mixture VAEs. I was quite surprised, especially since I had worked on a &lt;em&gt;very&lt;/em&gt; similar (maybe the same?) concept &lt;a href=&quot;https://github.com/RuiShu/vae-experiments/tree/master/modality&quot;&gt;a few months back&lt;/a&gt;. It’s an interesting read, so I do recommend it. But the basic gist of it is: instead of a typical VAE-based deep generative model with layers of Gaussian latent variables, the authors propose using a &lt;em&gt;mixture&lt;/em&gt; of Gaussians for one of the layers. In doing so, we can now do unsupervised clustering with the new Gaussian Mixture VAE (GMVAE) model.&lt;/p&gt;

&lt;p&gt;There are two parts of the paper that I wish to address. First, I don’t like the name: Gaussian Mixture VAE. Second, I am concerned with their interpretation that the Consistency Violation term fixes an “anti-clustering” effect induced by the categorical variable prior. This post is mostly dedicated to the second concern.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-gaussian-mixture-vae-is-not-actually-a-gaussian-mixture-vae&quot;&gt;The Gaussian Mixture VAE is Not Actually a Gaussian Mixture VAE&lt;/h3&gt;

&lt;p&gt;One thing that bugged me was that they didn’t actually have a mixture of Gaussians per se. In their paper, they used the following generative model&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
p(x, y, z_1, z_2) &amp;= p(y)p(z_2)p(z_1 \mid y, z_2) p(x \mid z_1)\\
y &amp;\sim \text{Cat}(1/K) \\
z_2 &amp;\sim \mathcal{N}(0, I) \\
z_1 &amp;\sim \mathcal{N}(\mu_z(y, z_2), \sigma_z^2(y, z_2))\\
x &amp;\sim \mathcal{B}(\mu_x(z_1)),
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;I should note that my naming choices differ from theirs and is more in keeping with previously established naming convention. Anyway, the authors noted that $Z_1\vert Z_2$ is a Gaussian mixture, which inspired the name GMVAE. But once you marginalize out $Z_2$, the distribution in $Z_1$ is actually an arbitrary distribution thanks to the non-linearities in the $\mu_z(\cdot)$ function. So what they really have is a mixture of arbitrary distributions in the space of $Z_1$. I think the naming convention is a bit unfortunate, but I can also see why they chose it. But in any case, at least it’s still a mixture of distributions!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-prior-is-anti-clustering&quot;&gt;The Prior is Anti-Clustering?&lt;/h3&gt;

&lt;p&gt;In order to perform clustering well, the authors made an eyebrow-raising modification to the standard variational objective. In particular, they introduced a new $\eta$ term. For the generative model mentioned above, the variational lower bound of $p(x)$ is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
\mathcal{L}
&amp;= \E_{q(y, z_{1:2} \mid x)} \brac{\ln p(y)p(z_2)(z_1 \mid y)p(x \mid z_1) - \ln q(y, z_{1:2} \mid x)}\\
&amp;= \E_{q(y \mid x)}[\ln p(y) - \ln q(y \mid x)] + \text{more terms}\\
&amp;= -KL(q(y \mid x) \| p(y)) + \text{more terms}.
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;With a bit of refactoring, you will find that the lower bound can be re-expressed to show the effect of the KL-divergence between $q(y \mid x)$ and $p(y)$. The argument goes: since $q(y \mid x)$ is forced to be close to the prior, the KL-term has an anti-clustering effect and thus needs to be down-weighted by some factor $\eta$ during training.&lt;/p&gt;

&lt;p&gt;The authors also introduced a new auxiliary objective: the Consistency Violation term. To greatly gloss over the specifics, this term minimizes the conditional entropy $\mathcal{H}(Y \mid X)$. The upshot is that $\eta$ and CV are both modifications to the original variational objective in order to counteract the nefarious anti-clustering prior.&lt;/p&gt;

&lt;p&gt;I can understand this line of logic, but I also think sends the wrong message about the purpose of the prior. Saying that the prior is anti-clustering is a bit of a &lt;a href=&quot;https://en.wiktionary.org/wiki/Citations:deepity&quot;&gt;deepity&lt;/a&gt;. From a different perspective, the prior is doing exactly what it is supposed to be: be anti-informative. The prior encourages $X$ to not encode information into $Y$ because doing so incurs the KL penalty. But suppose that encoding into $Y$ &lt;em&gt;helps&lt;/em&gt; improve reconstruction. If the reward of better reconstructions outweighs the cost of the incurred penalty, then the model will use $Y$.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;revisiting-kingmas-m2-model&quot;&gt;Revisiting Kingma’s M2 Model&lt;/h3&gt;

&lt;p&gt;The big question is then: does using the discrete $Y$ actually help improve the variational lower bound? In other words, does encoding into $Y$ help more than it hurts? Intuitively, the answer seems to be yes—for the right type of data. In MNIST, for example, there are very clearly 10 different classes. It seems natural that an optimal encoding will involve a categorical variable. &lt;/p&gt;

&lt;p&gt;It would be nice to know, without all the bells and whistles of weighting terms and Consistency Violation, how well a mixture VAE trained using the vanilla variational objective would perform as a clustering algorithm. Fortunately, the &lt;a href=&quot;https://arxiv.org/abs/1611.02648&quot;&gt;paper&lt;/a&gt; does provide such an example in Figure 2d. However, they did not provide a quantitative measure of how well the model would perform on the MNIST unuspervised clustering task. More importantly, they are training their 2-stochastic-layer model using mean-field approximation. It is notoriously difficult to train Deep Latent Gaussian Models (DLGMs) when you restrict the variational family to the set of independent Gaussians, and a lot of work had been done to find better ways of doing &lt;a href=&quot;https://arxiv.org/abs/1602.02282&quot;&gt;structured mean-field inference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to not potentially conflate multiple contributing factors, let’s make our experiment as possible and revisit Kingma’s M2 model. In Kingma’s original &lt;a href=&quot;https://arxiv.org/abs/1406.5298&quot;&gt;semi-supervised learning paper&lt;/a&gt;, Kingma proposed a simple generative model of the form&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
p(x, y, z) &amp;= p(y)p(z) p(x \mid y, z)\\
y &amp;\sim \text{Cat}(1/K) \\
z &amp;\sim \mathcal{N}(0, I) \\
x &amp;\sim \mathcal{B}(\mu_x(y, z)).
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;As far as mixture VAEs, this is probably the simplest one. Furthermore, M2 was successfully used for semi-supervised learning, so it is a bit unfortunate that the GMVAE authors did not evaluate the performance of unsupervised M2. So that’s &lt;a href=&quot;http://nbviewer.jupyter.org/github/RuiShu/vae-clustering/blob/master/experiments.ipynb&quot;&gt;what I did&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I trained M2 on the MNIST data set in an unsupervised manner. During training, I kept track of the conditional entropy $\mathcal{H}(Y\mid X)$, the variational loss (which I define to be the negative variational lower bound), and the cluster accuracy. The cluster accuracy metric is defined in section 4.2 of the GMVAE paper: we assign the class label to the cluster based on the most-frequently-occuring label within a cluster. The test set performance over time for each metric is shown respectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gmvae/m2.png&quot; alt=&quot;My Image&quot; width=&quot;1000px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results are horrifyingly dismal. It is quite remarkable to see just how poorly M2 performs at unsupervised clustering! In fact, it is painfully obvious that $Y$ was not used &lt;em&gt;at all&lt;/em&gt;. The conditional entropy indicates that $q(y \mid x)$ is a uniform distribution. The &lt;em&gt;Accuracy v. Epochs&lt;/em&gt; plot is most striking: at some point, $Y$ was in fact encoding the class label information of $X$ (to some extent), but then proceeded to give up on this endeavor entirely.&lt;/p&gt;

&lt;h3 id=&quot;so-why-did-the-model-fail&quot;&gt;So Why Did the Model Fail?&lt;/h3&gt;

&lt;p&gt;To some extent, yes, the “anti-clustering” prior obviously played a role. But that is not a satisfactory explanation, because the question still remains: why on earth &lt;em&gt;wasn’t&lt;/em&gt; it useful to encode information about $X$ into $Y$? Even if the mutual information between $Y$ and $X$ is maximal, we would only incur a penalty of $\sim2.3$ nats. One would imagine that correctly realizing that there are actually 10 different manifolds in the data-generating distribution is worth more than $2.3$ nats.&lt;/p&gt;

&lt;p&gt;I have a hunch as to why the model failed. If you pay close attention, you will notice that the marginal distribution of $Z$ in the inference model is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
q(z \mid x) &amp;= \sum_i q(z, y \mid x) \\
&amp;= \sum_i q(y \mid x) q(z \mid x, y).
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;Recall that we are using independent Gaussians as our variational family. If our model reduces the conditional entropy $\mathcal{H}(Y \mid X)$ to zero (i.e. maximal mutual information $I(X, Y)$), $q(z \mid x)$ reduces to a Gaussian. But if $Y$ is not informative about $X$, we &lt;em&gt;get to expand our variational family to the set of Gaussian mixtures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At the end of the day, M2 only cares about minimizing the variational loss. So it asks a simple question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;which-is-better&quot;&gt;Which is better?&lt;/h3&gt;
  &lt;ol&gt;
    &lt;li&gt;Have 10 different data-generating manifolds, but a simpler Gaussian variational family.&lt;/li&gt;
    &lt;li&gt;Have a single data-generating manifold, but an expanded Gaussian mixture variational family.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;It would appear that M2 chose the second option. To really test this hypothesis out, we should use a more expressive variational family and see if $Y$ remains uninformative about $X$. I will get round to testing this later :)&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;m2-is-a-gmvae-in-disguise&quot;&gt;M2 is a GMVAE in Disguise&lt;/h3&gt;

&lt;p&gt;One thing I did not like about my previous hypothesis was that it felt like a cop-out. I am quite confident that if our variational family is better, $Y$ would be used. That M2 doesn’t encode into $Y$ is likely a manifestation of &lt;a href=&quot;http://bayesiandeeplearning.org/papers/BDL_44.pdf&quot;&gt;over-pruning&lt;/a&gt; and the &lt;a href=&quot;https://arxiv.org/abs/1611.02731v1&quot;&gt;bits-back coding&lt;/a&gt; mechanism.&lt;/p&gt;

&lt;p&gt;I wanted to know if there is a &lt;em&gt;simpler&lt;/em&gt; way to encourage encoding into $Y$ while adhering strictly to the variational framework. Simply put, I wanted to demonstrate that the “anti-clustering” prior &lt;em&gt;can&lt;/em&gt; be easily overcome without having to tweak our objective function with $\eta$ or the Consistency Violation term.&lt;/p&gt;

&lt;p&gt;It turns out that a simple solution does exist. After some thought, I realized that the M2 model is not just any mixture VAE—it is a Gaussian Mixture VAE! To see this more clearly, we will have to pry open the $\mu_x(\cdot)$ function.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
h_1 &amp;=  W_y y + W_z z\\
a_1 &amp;= \text{ReLU}(h_1)\\
h_2 &amp;= W_2 a_1 + \beta_2\\
a_2 &amp;= \text{ReLU}(h_1)\\
&amp;~~\vdots \\
\mu_x(y, z) &amp;:= W_n a_{n-1} + \beta_n.
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;Note that $H_1$ is a deterministic function of the random variables $Z$ and $Y$. Since $z$ is drawn from a unit Gaussian and $y$ is a one-hot vector, we have a mixture of Gaussians in the space of $H_1$. As a result, it’s not too much of a stretch to claim equivalency between the three Bayesian structures shown below. Out of convenience, I represent the deterministic transformation $h = W_y y + W_z z$ with dotted arrows. All other arrows represent conditional Gaussian or Bernoulli distributions where appropriate.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/images/gmvae/equivalent.png&quot; alt=&quot;My Image&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are, however, two set-backs. First, since $W_z$ is independent of $Y$, we have a mixture of Gaussians whose components all share the same covariance. And more crucially, even if we force $W_z$ to be a square matrix, we have no guarantee that it is positive definite. To address both issues, I made a simple change&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
W_z &amp;:= \text{diag}(\sqrt{\text{softplus}(W_s y)}).
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;I chose a diagonal structure for simplicity, but the important point is that $W_z$ is now forced to be positive definite. So let’s see how well this modified version of M2 does.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gmvae/modified_m2_method=relu.png&quot; alt=&quot;My Image&quot; width=&quot;1000px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It turns out this simple change made a huge difference! By explicitly making the transformation matrix positive definite, it’s as if we tied the generative model down and told it &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;You have to use a non-degenerate mixture of Gaussians&lt;/em&gt; &lt;strong&gt;or I will cut you&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Surprisingly, we made no change to the inference model at all. We simply restricted the generative model to exhibit a specific behavior, which indirectly led to the modified-M2 deciding that having 10 different data-generating manifolds &lt;em&gt;is&lt;/em&gt; a good thing.&lt;/p&gt;

&lt;h3 id=&quot;the-real-gaussian-mixture-vae&quot;&gt;The Real Gaussian Mixture VAE&lt;/h3&gt;

&lt;p&gt;One odd behavior I encountered when using the modified-M2 is that the loss would suddenly become NaN after several hundred epochs. I imagine clipping the gradients would prevent this from happening, but it is interesting that this behavior appears at all. I attribute this to optimization challenges associated with the specific way the modified-M2 is trained.&lt;/p&gt;

&lt;p&gt;There is something quite awkward about the modified-M2 model training objective. Our actual latent variable of interest is now $H_1$, which we have forced to be distributed according to a proper mixture of Gaussians. However our inference model never explicitly computes $q(h_1 \mid x, y)$. Instead, we perform inference on $Z$, which really only serves as an auxiliary variable for generating $H_1$. This means we are performing inference on the auxiliary variable used in the reparameterization trick! That can’t be a good thing, can it?&lt;/p&gt;

&lt;p&gt;To address this, let’s reorganize our generative model to better reflect that our model contains a single-stochastic layer whose marginal distribution is a mixture of Gaussians. We do so via the following&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
p(x, y, z) &amp;= p(y)p(z \mid y)p(x \mid z)\\
y &amp;\sim \text{Cat}(1/K) \\
z &amp;\sim \mathcal{N}(\mu_z(y), \sigma_z^2(y))\\
x &amp;\sim \mathcal{B}(\mu_x(z)),
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;I stress that our inference model remains exactly the same.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
q(y, z \mid x) = q(z \mid y) q(z \mid x, y).
&lt;/script&gt;

&lt;p&gt;From a computation stand-point the M2, modified-M2, and real GMVAE models use the same inference networks. However, we interpret the GMVAE inference model &lt;em&gt;very&lt;/em&gt; differently. In particular, the marginal distribution of $Z$ is now a mixture of Gaussians, and we use a Gaussian $q(z \mid x, y)$ to approximate the posterior. Putting everything together, our variational lower bound becomes&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{align}
\mathcal{L} 
&amp;= \E_{q(y, z \mid x)}\brac{\ln p(x, y, z) - \ln q(y, z \mid x)} \\
&amp;= \E_{q(y, z \mid x)}\brac{ \ln \frac{p(y)}{q(y \mid x)} + \ln \frac{p(z \mid y)}{q(z \mid x, y)} + \ln p(x \mid y, z)}.
\end{align}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;I took the liberty of grouping like-terms together. Unlike the modified-M2, signal from the objective function is directly propagated into $p(z \mid y)$, which hopefully provides a stronger signal for $Y$ to be informative about $X$. Using our new-and-improved real GMVAE, I achieved the following results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gmvae/gmvae.png&quot; alt=&quot;My Image&quot; width=&quot;1000px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The improvement is striking! The real GMVAE with proper inference achieves the best performance out of all three models. I ran the same experiment multiple times. By the 1000th epoch, five out of six replicates achieved accuracy performances above 80%. One of them even achieved an accuracy of 95%! Surprisingly, our real GMVAE managed to outperform the “GMVAE(M=1) K=10” model both in terms of best run and average run (and does about as well as the “GMVAE(M=10) K=10” model). Also, in constrast to the models from the paper, I didn’t have to rely on convolutional layers, Consistency Violation, or $\eta$, which I consider a personal victory. &lt;em&gt;*blows knuckles*&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gmvae/combined.png&quot; alt=&quot;My Image&quot; width=&quot;1000px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To get a better comparison of the models, I also superimposed all three model performances. In doing so, we actually get to see something pretty interesting. If we look at the middle &lt;em&gt;Variational Loss v. Epochs&lt;/em&gt; plot, M2 achieves the best loss value despite its poor clustering ability. Modified-M2, on the other hand, has a constrained generative model which led to higher variational loss &lt;em&gt;but&lt;/em&gt; better clustering. While not definitive, I think this lends further credence to the hypothesis that M2 chooses a Gaussian Mixture variational family over a Gaussian Mixture manifold because the former leads to lower variational loss.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;final-remarks&quot;&gt;Final Remarks&lt;/h3&gt;

&lt;p&gt;These experiments helped me get a better understanding of what’s going on behind the scenes of deep generative models that use variational inference. Making these tiny tweaks &lt;em&gt;only&lt;/em&gt; to the generative model and arriving at vastly different model behaviors speaks volumes about the importance of really grokking deep generative models and deep amortized variational inference.&lt;/p&gt;

&lt;p&gt;If we really only cared about building a deep generative model, we probably won’t care much about whether certain latent variables are being pruned so long as we get a good log-likelihood score. However, if the plan is to repurpose the inference model for a downstream task such as classification or interpretable representations, we should pay more attention to how we set up both the inference &lt;em&gt;and&lt;/em&gt; generative models. On that note, I think there is still value in the Consistency Violation term because it gives us explicit control over what the generative model is doing. We can think of CV almost like a prior imposed on the behavior of the generative model, and I imagine it being very valuable once we move to deeper DLGMs or more mixture components. I would also not be surprised if applying CV to the real GMVAE leads to even better clustering performance. &lt;/p&gt;

&lt;p&gt;But hopefully, I’ll never see a term like $\eta$ ever again. Because I think there are definitely more elegant and insightful ways of getting the generative model to do what we want.&lt;/p&gt;

&lt;p&gt;Wait, what’s this &lt;a href=&quot;https://openreview.net/forum?id=Sy2fzU9gl&quot;&gt;paper&lt;/a&gt;? A $\beta$ term…? (╯°□°)╯︵ ┻━┻&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/RuiShu/vae-clustering&quot; target=&quot;_blank&quot; class=&quot;big-button gray&quot;&gt;Code on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nbviewer.jupyter.org/github/RuiShu/vae-clustering/blob/master/experiments.ipynb&quot; target=&quot;_blank&quot; class=&quot;big-button gray&quot;&gt;Jupyter Notebook&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
        <pubDate>Sun, 25 Dec 2016 00:00:00 -0800</pubDate>
        <link>/2016/12/25/gmvae/</link>
        <guid isPermaLink="true">/2016/12/25/gmvae/</guid>
      </item>
    
  </channel>
</rss>
